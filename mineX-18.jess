;;INIT MESSAGE
(printout t "Carregando mineX18.jess" crlf)

(defmodule INIT-PARSE)
(defrule find-covered
  
)

(defmodule MINE)
(deffacts tag-escolhe
   (escolhe-prox))

(deftemplate pre-escolhe
  (slot x)
  (slot y)
)

(deffunction randInterval (?min ?max)
(+ ?min (mod (random) (- (+ 1 ?max) ?min))))

(defrule ui
?out <- (escolhe-prox)
(not (aberta))
(mundo (min-x ?minx) (max-x ?maxx) (min-y ?miny) (max-y ?maxy))
=>
(retract ?out)
(assert (escolhe-prox) (novas-bandeiras) 
        (escolhe (x (randInterval ?minx ?maxx)) 
                 (y (randInterval ?miny ?maxy))))
(return))

(defrule init
  ?z <- (escolhe-prox)
  (aberta)
  (mundo (min-x ?minx) (max-x ?maxx) (min-y ?miny) (max-y ?maxy))
  =>
  (retract ?z)
  (printout t "Working..." crlf)
  (assert 
    (pre-escolhe 
      (x (randInterval ?minx ?maxx)) 
      (y (randInterval ?miny ?maxy)) 
    ) 
  )
)

(defrule play
?out <- (pre-escolhe (x ?x) (y ?y))
(not (aberta (x ?x) (y ?y) (valor ?)))
=>
(retract ?out)
(printout t "Joga: X:" ?x " Y:" ?y crlf)
(assert (escolhe-prox) (novas-bandeiras) 
        (escolhe (x ?x) 
                 (y ?y)))

)
(defrule replay
?out <- (pre-escolhe (x ?x) (y ?y))
(aberta (x ?x) (y ?y) (valor ?))
(mundo (min-x ?minx) (max-x ?maxx) (min-y ?miny) (max-y ?maxy))
=>
(retract ?out)
(printout t "Tenta novamente: X:" ?x " Y:" ?y crlf)
(assert 
  (pre-escolhe 
    (x (randInterval ?minx ?maxx))
    (y (randInterval ?miny ?maxy))
  )
)
)


;;FINAL MESSAGE
(printout t "O FIM de mineX18.jess" crlf)