;;MODULES DEFINITION
(defmodule METHODS)
;;calcula a distancia de manhattan
(deffunction METHODS::manhattan (?xh ?yh ?xb ?yb)
  (+
    (abs (- ?xh ?xb))
    (abs (- ?yh ?yb))
  )
)

;;verifica se duas casas sao vizinhas
(deffunction METHODS::viz (?xh ?yh ?xb ?yb)
  (or
    (= (METHODS::manhattan ?xh ?yh ?xb ?yb ) 1)
    ( and (= (- ?xb 1) ?xh ) (= (+ ?yb 1) ?yh )) ;;top left
    ( and (= (+ ?xb 1) ?xh ) (= (+ ?yb 1) ?yh )) ;;top right
    ( and (= (- ?xb 1) ?xh ) (= (- ?yb 1) ?yh )) ;;bottom left
    ( and (= (+ ?xb 1) ?xh ) (= (- ?yb 1) ?yh )) ;;bottom right
  )
)


(defmodule MINE)
(defmodule INIT)
(deftemplate MAIN::cell
  (slot x)
  (slot y)
  (slot v)
  (multislot viz-flags)
  (multislot viz-safe)
  (multislot viz-closed)
)

(defmodule FLAG)

;;;;;;;;;;;;;;;;;;;;;;;; MINE MODULE
(set-current-module MINE)

(deftemplate MAIN::fechada
  (slot x)
  (slot y)
  (multislot adj)
)

(deffacts tag-escolhe
  (escolhe-prox)
)



(deffunction randInterval (?min ?max)
(+ ?min (mod (random) (- (+ 1 ?max) ?min))))

;;First shot is totally blind
(defrule initial
  ?z    <- (MAIN::initial-fact)
  ?out  <- (escolhe-prox)
  (MAIN::mundo (min-x ?minx) (max-x ?maxx) (min-y ?miny) (max-y ?maxy))
  =>
  (printout t "Woofy the dog is going to save your garden. Fette Atencion!" crlf)
  (printout t "Fette Atencion Monsieur!" crlf)
  (retract ?out)
  (retract ?z)
  (assert (escolhe-prox) (novas-bandeiras) 
        (escolhe (x (randInterval ?minx ?maxx)) 
                 (y (randInterval ?miny ?maxy))))
  (assert (MINE::run-algorithm))
  (return)
)

;;Other shots are planned
(defrule setup
  ?z <- (MINE::run-algorithm)
  ?out  <- (escolhe-prox)
  (MAIN::mundo (min-x ?minx) (max-x ?maxx) (min-y ?miny) (max-y ?maxy))
  =>
  (retract ?z)
  (printout t "Woofy is carefully inspecting...")
  (assert (MAIN::flags (create$)))
  (assert (INIT::go_to))
)

(defrule prepare
  (declare (auto-focus TRUE))
  ?z <- (MINE::prepare-play)
  =>
  (retract ?z)
  (assert (MINE::play))
)

(defrule pre-play
  (declare (salience 2))
  (MAIN::flag ?x ?y)
  (MINE::play)
  (not(MAIN::flags $?antes ?x ?y $?depois))
  =>
  (assert (MAIN::flags ?x ?y))
)

(defrule play
  (declare (salience 1))
  ?p <- (MINE::play)
  (MAIN::mundo (min-x ?minx) (max-x ?maxx) (min-y ?miny) (max-y ?maxy))
  (MAIN::flags $?flags)
  =>
  (printout t "Woof Woof!" crlf)
  (retract ?p)
  (assert (escolhe-prox) (novas-bandeiras $?flags) 
        (escolhe (x (randInterval ?minx ?maxx)) 
                 (y (randInterval ?miny ?maxy))))
  (assert (MINE::run-algorithm))
  (return)
)

(defrule pre-play
  (MINE::play)
  (MAIN::mundo (min-x ?minx) (max-x ?maxx) (min-y ?miny) (max-y ?maxy))
  (MAIN::flags $?flags)
  =>
  (printout t "Woof Woof!" crlf)
  (retract ?p)
  (assert (escolhe-prox) (novas-bandeiras $?flags) 
        (escolhe (x (randInterval ?minx ?maxx)) 
                 (y (randInterval ?miny ?maxy))))
  (assert (MINE::run-algorithm))
  (return)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;INIT
(set-current-module INIT)
(defrule setup
  (declare (auto-focus TRUE))
  ?z <- (go_to)
  =>
  (printout t "INIT::setting up" crlf)
  (assert (generate-fechadas-and-delete))
)

;;gerar closed
(defrule generate-fechadas
  ?z <- (generate-fechadas-and-delete)
  (mundo (min-x ?minx) (max-x ?maxx) (min-y ?miny) (max-y ?maxy))
  =>
  (bind ?i ?minx)
  (while (<= ?i ?maxx) do
    (bind ?j ?miny)
    (while (<= ?j ?maxy) do
      (assert (MAIN::fechada (x ?i) (y ?j) (adj (create$))))
      (bind ?j (+ ?j 1))
    )
    (bind ?i (+ ?i 1))
  )
  (retract ?z)
  (assert (parse-generated-fechadas))
)

;;apagar closed
(defrule delete-fechadas
  (declare (salience 2))
  (parse-generated-fechadas)
  (MAIN::aberta (x ?x) (y ?y))
  ?z <- (MAIN::fechada (x ?x) (y ?y))
  =>
  (retract ?z)
)

;;gerar viz para cada aberta
(defrule generate-viz
  (declare (salience 2))
  (parse-generated-fechadas)
  (MAIN::aberta (x ?x) (y ?y) (valor ?v&:(> ?v 0)))
  =>
  (assert (MAIN::cell (x ?x) (y ?y) (v ?v) (viz-closed (create$)) (viz-safe (create$)) (viz-flags (create$))))
)

;;generate abertas vizs
(defrule fill-vizs
  (declare (salience 1))
  (parse-generated-fechadas)
  ?z <- (MAIN::cell (x ?x) (y ?y) (viz-closed $?vl))
  (MAIN::fechada (x ?xh) (y ?yh))
  (test (METHODS::viz ?xh ?yh ?x ?y))
  (not(MAIN::cell (x ?x) (y ?y) (viz-closed $?pl ?xh ?yh $?al)))
  =>
  (modify ?z (viz-closed $?vl ?xh ?yh))
)

;;passa fluxo para mine
(defrule pass
  (declare (salience 0))
  ?z <- (parse-generated-fechadas)
  =>
  (retract ?z)
  (assert (FLAG::go_to))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; MODD FLAG
(defrule FLAG::setup
  (declare (auto-focus TRUE))
  ?z <- (FLAG::go_to)
  =>
  (retract ?z)
  (assert (FLAG::flag))
)

(defrule flag
  (declare (salience 2))
  (FLAG::flag)
  (MAIN::fechada (x ?xf) (y ?yf))
  (MAIN::cell (x ?xv) (y ?yv) (v ?vv) (viz-closed $? ?xf ?yf $?))
  (MAIN::cell (x ?xv) (y ?yv) (v ?vv) (viz-closed $?list&:(= (length$ $?list)  (* ?vv 2) )))
  =>
  (assert (MAIN::flag ?xf ?yf))
)

(defrule pass
  (declare (salience 1))
  (FLAG::flag)
  =>
  (printout t "gonna play" crlf)
  (assert (MINE::play))
)


;;FINAL MESSAGE
(printout t "O FIM de mineX18.jess" crlf)