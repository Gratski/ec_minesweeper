;;MODULES DEFINITION
(defmodule METHODS)
;;calcula a distancia de manhattan
(deffunction METHODS::manhattan (?xh ?yh ?xb ?yb)
  (+
    (abs (- ?xh ?xb))
    (abs (- ?yh ?yb))
  )
)

(deffunction METHODS::randInterval (?min ?max)
  (+ ?min (mod (random) (- (+ 1 ?max) ?min)))
)

(deffunction METHODS::complement ($?mega-list)
  (bind ?result (create$))
  (bind ?index 1)
  (while (<= ?index (length$ $?mega-list)) do
    (bind ?x (nth$ ?index $?mega-list))
    (bind ?y (nth$ (+ ?index 1) $?mega-list))
    (bind ?index_2 (+ ?index 2))
    (while (<= ?index_2 (length$ $?mega-list)) do
      (bind ?new_x (nth$ ?index_2 $?mega-list))
      (bind ?new_y (nth$ (+ ?index_2 1) $?mega-list))
      (if (and (= ?x ?new_x) (= ?y ?new_y))
        then
          (insert$ $?result ?x ?y)
          (delete$ $?mega-list ?index_2 (+ ?index_2 1))
          (bind ?index_2 10000)
      )
      (bind ?index_2 (+ ?index_2 2))
    )
    (bind ?index (+ ?index 2))
  )
  (return $?result)
)

(deffunction METHODS::is-viz-of-any (?x ?y $?list)
  (METHODS::is-viz-of-any-aux 1 ?x ?y $?list)
)

(deffunction METHODS::is-viz-of-any-aux (?index ?x ?y $?list)
  (if (>= ?index (length$ $?list)) 
    then
      (return FALSE)
    else
      (if (METHODS::viz ?x ?y (nth$ ?index $?list) (nth$ (+ ?index 1) $?list))
        then  
          (return TRUE)
        else
          (METHODS::is-viz-of-any-aux (+ ?index 2) ?x ?y $?list)
      )
  )
)

;;verifica se duas casas sao vizinhas
(deffunction METHODS::viz (?xh ?yh ?xb ?yb)
  (or
    (= (METHODS::manhattan ?xh ?yh ?xb ?yb ) 1)
    (and (= (- ?xb 1) ?xh ) (= (+ ?yb 1) ?yh )) ;;top left
    (and (= (+ ?xb 1) ?xh ) (= (+ ?yb 1) ?yh )) ;;top right
    (and (= (- ?xb 1) ?xh ) (= (- ?yb 1) ?yh )) ;;bottom left
    (and (= (+ ?xb 1) ?xh ) (= (- ?yb 1) ?yh )) ;;bottom right
  )
)

(deffunction METHODS::choose-random (?minx ?maxx ?miny ?maxy $?list)
  (bind ?rand_x (METHODS::randInterval ?minx ?maxx))
  (bind ?rand_y (METHODS::randInterval ?miny ?maxy))
  (if (METHODS::has-cell-member ?rand_x ?rand_y $?list)
    then
      (return (METHODS::choose-random ?minx ?maxx ?miny ?maxy $?list))
    else
      (return (create$ ?rand_x ?rand_y))
  )
)

(deffunction METHODS::has-cell-member (?x ?y $?list)
  (METHODS::has-cell-member-aux ?x ?y 1 $?list)
)

(deffunction METHODS::has-cell-member-aux (?x ?y ?index $?list)
  (if (> ?index (- (length$ $?list) 1))
    then
      (return FALSE)
  )
  (bind ?first (nth$ ?index ?list))
  (bind ?second (nth$ (+ ?index 1) $?list))
  (if (and (= ?x ?first) (= ?y ?second))
    then
      (return TRUE)
    else
      (METHODS::has-cell-member-aux ?x ?y (+ ?index 2) $?list)
  )
)

(deffunction METHODS::assert-all-safe (?index $?safe-list)
  (if (<= ?index (-(length$ $?safe-list) 1)) 
    (assert (MAIN::safe 
                  (nth$ ?index $?safe-list)
                  (nth$ (+ ?index 1) $?safe-list)
            )
    )
    (METHODS::assert-all-safe (+ ?index 2) $?safe-list)
  )
)

(defmodule MINE)
(defmodule INIT)
(deftemplate MAIN::cell
  (slot x)
  (slot y)
  (slot v)
  (multislot viz-flags)
  (multislot viz-safe)
  (multislot viz-closed)
)

(defmodule FLAG)

;;;;;;;;;;;;;;;;;;;;;;;; MINE MODULE
(set-current-module MINE)

(deftemplate MAIN::fechada
  (slot x)
  (slot y)
  (multislot adj)
)

(deffacts tag-escolhe
  (escolhe-prox)
)

;;First shot is totally blind
(defrule initial
  ?z    <- (MAIN::initial-fact)
  ?out  <- (escolhe-prox)
  (MAIN::mundo (min-x ?minx) (max-x ?maxx) (min-y ?miny) (max-y ?maxy))
  =>
  (printout t "Woofy the dog is going to save your garden. Fette Atencion!" crlf)
  (printout t "Fette Atencion Monsieur!" crlf)
  (retract ?out)
  (retract ?z)
  (assert (escolhe-prox) (novas-bandeiras) 
        (escolhe (x (METHODS::randInterval ?minx ?maxx)) 
                 (y (METHODS::randInterval ?miny ?maxy))))
  (assert (MAIN::lista-abertas (create$)))
  (assert (MAIN::lista-safes (create$)))
  (assert (MAIN::lista-flags (create$)))
  (assert (MINE::run-algorithm))
  (return)
)

;;Other shots are planned
(defrule setup
  ?z <- (MINE::run-algorithm)
  ?out  <- (escolhe-prox)
  (MAIN::mundo (min-x ?minx) (max-x ?maxx) (min-y ?miny) (max-y ?maxy))
  =>
  (retract ?z)
  (printout t "Woofy is carefully inspecting...")
  (assert (MAIN::flags-descobertas (create$)))
  (assert (INIT::go_to))
)

;;RECEBE TRIGGER PARA PLAY
(defrule prepare
  (declare (auto-focus TRUE))
  ?z <- (MINE::prepare-play)
  =>
  (retract ?z)
  (assert (MAIN::novas-flags (create$)))
  (assert (MINE::play))
)

;;REUNE FLAGS
(defrule gather-flags
  (declare (salience 5))
  (MINE::play)

  ?z <- (MAIN::flags-descobertas $?flags)
  ?id <- (MAIN::lista-flags $?list_flags)
  ?f <- (MAIN::nova-flag ?x ?y)
  (test
    (not (METHODS::has-cell-member ?x ?y $?flags))
  )
  (not (exists(MAIN::flag ?x ?y)))
  =>
  (assert (MAIN::flag ?x ?y))
  (retract ?z)
  (retract ?f)
  (retract ?id)
  (assert (MAIN::flags-descobertas $?flags ?x ?y))
  (assert (MAIN::lista-flags $?list_flags ?x ?y))
)
(defrule gather-flags-cleaner
  (declare (salience 5))
  (MINE::play)
  ?f <- (MAIN::nova-flag ?x ?y)
  (exists(MAIN::flag ?x ?y))
  =>
  (retract ?f)
)

;;PREPARA FACTOS PARA JOGADA
;;SUPER CLICK
(defrule pre-play-mega-clic
  (declare (salience 4))
  (MINE::play)
  (MAIN::flags-descobertas $?flags)
  (MAIN::cell (x ?xc) (y ?yc) (v ?vc)
              (viz-flags $?cflags&:(= (length$ $?cflags) (* ?vc 2)))
              (viz-closed $?cclosed&:(> (length$ $?cclosed) (length$ $?cflags)))
  )
  (not (exists (MAIN::super ?xc ?yc)))
  (not (exists (MAIN::jogada ? ?)))
  (not (METHODS::is-viz-of-any ?xc ?yc $?flags))
  (not
    (or
      (exists (MAIN::cell (x ?xc2&:(not(= ?xc ?xc2))) (y ?yc2) (v ?vc2)
              (viz-safe $?csafe2&:(= (length$ $?csafe2) (* ?vc2 2)))
              (viz-closed $?cclosed2&:(> (length$ $?cclosed2) (length$ $?cclosed)))
            )
      )
      (exists (MAIN::cell (x ?xc2) (y ?yc2&:(not(= ?yc ?yc2))) (v ?vc2)
              (viz-safe $?csafe2&:(= (length$ $?csafe2) (* ?vc2 2)))
              (viz-closed $?cclosed2&:(> (length$ $?cclosed2) (length$ $?cclosed)))
            )
      )
    )
  )
  =>
  (printout t "SUPER!!!" crlf)
  (printout t "PLAYED X:"?xc " Y:"?yc crlf)
  (printout t "FLAGS LIST " $?cflags crlf)
  (printout t "FLAGS DISCOVERED: " $?flags crlf)
  (printout t "EH VIZ DE ALGUMA " (METHODS::is-viz-of-any ?xc ?yc $?flags) crlf)
  (assert (MAIN::super ?xc ?yc))
  (assert (MAIN::jogada ?xc ?yc))
)


;;;;;; GIANT MESS DOWN THERE:
;;;;;;(num_closed_ajdacentes - flags_adjacentes - safes_adjacentes - valor) / (num_closed_ajdacentes - flags_adjacentes - safes_adjacentes)
;;;;;;    tem de ser maior que
;;;;;;(total_closed - total_safe - total_flags - (minas - total_flags)) / (total_closed - total_safe - total_flags)

(defrule pre-probabilistic-play
  (declare (salience 3))
  (MINE::play)
  (not (exists(MAIN::safe ? ?)))
  (not (exists (MAIN::jogada ? ?)))
  (MAIN::total-fechadas ?num_de_fechadas)
  (MAIN::minas ?num_minas)
  (MAIN::lista-flags $?total_flags)
  (MAIN::lista-safes $?total_safes)
  (MAIN::fechada (x ?xf) (y ?yf))
  (not (MAIN::flag ?xf ?yf))

  ;;;; SANTA MARIA MAE DE DEUS, ROGAI POR NOS PECADORES
  (MAIN::cell (x ?xc) (y ?yc) (v ?vc)
        (viz-flags $?flags)
        (viz-safe $?safes)
        (viz-closed $?cclosed&:
          (>=
            (/
              (-
                (-
                  (-
                    (/ (length$ $?cclosed) 2)
                    (/ (length$ $?flags) 2)
                  )
                  (/ (length$ (METHODS::complement (create$ $?safes $?cclosed))) 2)
                )
                (- ?vc (/ (length$ $?flags) 2))
              )
              (-
                (-
                  (/ (length$ $?cclosed) 2)
                  (/ (length$ $?flags) 2)
                )
                (/ (length$ (METHODS::complement (create$ $?safes $?cclosed))) 2)
              )
            )

            (/
              (- (- (- ?num_de_fechadas (/ (length$ $?total_safes) 2)) (/ (length$ $?total_flags) 2)) (- ?num_minas (/ (length$ $?total_flags) 2)))
              (- (- ?num_de_fechadas (/ (length$ $?total_safes) 2)) (/ (length$ $?total_flags) 2))
            )
          )
        )
  )
  (test
    (METHODS::viz ?xf ?yf ?xc ?yc)
  )
  =>
  (assert (MAIN::jogada ?xf ?yf))
  (printout t "PROBABILISTIC!!! length de safes é" (/ (length$ $?total_safes) 2) " de " $?total_safes ". Além disso a length de todas as flags é: " (length$ $?total_flags) crlf)
  (printout t "PROBABILISTIC!!! de " ?xf " " ?yf " com base em " ?xc " " ?yc crlf)
  (printout t (/
              (-
                (-
                  (-
                    (/ (length$ $?cclosed) 2)
                    (/ (length$ $?flags) 2)
                  )
                  (/ (length$ (METHODS::complement (create$ $?safes $?cclosed))) 2)
                )
                (- ?vc (/ (length$ $?flags) 2))
              )
              (-
                (-
                  (/ (length$ $?cclosed) 2)
                  (/ (length$ $?flags) 2)
                )
                (/ (length$ (METHODS::complement (create$ $?safes $?cclosed))) 2)
              )
            ) " is better than " (/
              (- (- (- ?num_de_fechadas (/ (length$ $?total_safes) 2)) (/ (length$ $?total_flags) 2)) (- ?num_minas (/ (length$ $?total_flags) 2)))
              (- (- ?num_de_fechadas (/ (length$ $?total_safes) 2)) (/ (length$ $?total_flags) 2))
            ) crlf)
  (printout t "PROBABILISTIC!!! listas " $?safes " " $?cclosed crlf)
  (printout t "PROBABILISTIC!!! de adjacentes = " (/ (length$ $?cclosed) 2) " - " (/ (length$ $?flags) 2) " - " (/ (length$ (METHODS::complement (create$ $?safes $?cclosed))) 2) " - " (- ?vc (/ (length$ $?flags) 2)) " SOBRE " (/ (length$ $?cclosed) 2) " - " (/ (length$ $?flags) 2) " - " (/ (length$ (METHODS::complement (create$ $?safes $?cclosed))) 2) crlf)
)

(defrule pre-play
  (declare (salience 2))
  (MINE::play)

  (MAIN::safe ?xs ?ys)
  (not (exists (MAIN::jogada ? ?)))
  =>
  (assert (MAIN::jogada ?xs ?ys))
)


;;REMOVER FACTOS USED
(defrule remove-fechadas
  (declare (salience 1))
  (MINE::play)
  ?z <- (MAIN::fechada (x ?x))
  =>
  (retract ?z)
)
(defrule remove-total-fechadas
  (declare (salience 1))
  (MINE::play)
  ?z <- (MAIN::total-fechadas ?)
  =>
  (retract ?z)
)
(defrule remove-safe
  (declare (salience 1))
  (MINE::play)
  ?z <- (MAIN::safe ? ?)
  =>
  (retract ?z)
)
(defrule remove-cells
  (declare (salience 1))
  (MINE::play)
  ?z <- (MAIN::cell (x ?))
  =>
  (retract ?z)
)
(defrule remove-others
  (declare (salience 1))
  (MINE::play)
  ?x <- (FLAG::flag)
  ?y <- (INIT::go_to)
  =>
  (retract ?y)
  (retract ?x)
)
(defrule remove-novas
  (declare (salience 1))
  (MINE::play)
  ?z <- (MAIN::novas-flags $?)
  =>
  (retract ?z)
)


;;PLAY ACERTIVO
(defrule play
  (declare (salience 0))
  ?p <- (MINE::play)
  (MAIN::mundo (min-x ?minx) (max-x ?maxx) (min-y ?miny) (max-y ?maxy))
  ?x <- (MAIN::flags-descobertas $?flags)
  ?z <- (MAIN::jogada ?xf ?yf)
  =>
  (printout t "Woof Woof! ACERTIVO" crlf)
  (retract ?p)
  (retract ?z)
  (retract ?x)
  (assert (escolhe-prox) (novas-bandeiras $?flags) 
        (escolhe (x ?xf) 
                 (y ?yf)))
  (assert (MINE::run-algorithm))
  (return)
)

;;FINISH GAME
(defrule play-finish
  (declare (salience 0))
  ?p <- (MINE::play)
  (MAIN::minas ?n)
  (MAIN::lista-flags $?flags&:(= (/ (length$ $?flags) 2) ?n))
  =>
  (printout t "playing thousand" crlf)
  (assert (escolhe-prox) (novas-bandeiras $?flags) 
        (escolhe (x 1000) 
                 (y 1000)))
)

;;PLAY RANDOM
(defrule rand-play
  (declare (salience 0))
  ?p <- (MINE::play)
  (MAIN::mundo (min-x ?minx) (max-x ?maxx) (min-y ?miny) (max-y ?maxy))
  (MAIN::lista-flags $?flags)
  (MAIN::lista-abertas $?abertas)
  (MAIN::lista-safes $?safes)
  (not (exists (MAIN::jogada ? ?)))
  =>
  (printout t "Woof Woof! RANDOM" crlf)
  (bind ?flag-open-safe (create$ $?flags $?abertas $?safes))
  (printout t $?flags crlf $?abertas)
  (bind ?rand_coor (METHODS::choose-random ?minx ?maxx ?miny ?maxy $?flag-open-safe))
  (assert (escolhe-prox) (novas-bandeiras) 
        (escolhe (x (nth$ 1 ?rand_coor)) 
                 (y (nth$ 2 ?rand_coor))))
  (retract ?p)
  (assert (MINE::run-algorithm))
  (return)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;INIT
(set-current-module INIT)
(defrule setup
  (declare (auto-focus TRUE))
  ?z <- (go_to)
  =>
  (printout t "INIT::setting up" crlf)
  (assert (generate-fechadas-and-delete))
)

;;GERA CLOSED
(defrule generate-fechadas
  ?z <- (generate-fechadas-and-delete)
  (mundo (min-x ?minx) (max-x ?maxx) (min-y ?miny) (max-y ?maxy))
  =>
  (printout t "A gerar fechadas!" crlf)
  (bind ?i ?minx)
  (while (<= ?i ?maxx) do
    (bind ?j ?miny)
    (while (<= ?j ?maxy) do
      (assert (MAIN::fechada (x ?i) (y ?j) (adj (create$))))
      (bind ?j (+ ?j 1))
    )
    (bind ?i (+ ?i 1))
  )
  (retract ?z)
  (assert (MAIN::total-fechadas (* (+ (* ?maxx 2) 1) (+ (* ?maxy 2) 1))))
  (assert (parse-generated-fechadas))
)

;;LIMPA FECHADAS INEXISTENTES
(defrule delete-fechadas
  (declare (salience 2))
  (parse-generated-fechadas)
  (MAIN::aberta (x ?x) (y ?y))
  ?z <- (MAIN::fechada (x ?x) (y ?y))
  ?t <- (MAIN::total-fechadas ?count)
  =>
  (retract ?t)
  (retract ?z)
  (assert (MAIN::total-fechadas (- ?count 1)))
)

;;GERAR LISTA ABERTAS
(defrule generate-abertas
  (declare (salience 2))
  (parse-generated-fechadas)
  (MAIN::aberta (x ?x) (y ?y))
  ?id <- (MAIN::lista-abertas $?abertas)
  (test (not (METHODS::has-cell-member ?x ?y $?abertas)))
=>
  (retract ?id)
  (assert (MAIN::lista-abertas $?abertas ?x ?y))
)

;;GERAR CELL PARA CADA ABERTA
(defrule generate-viz
  (declare (salience 2))
  (parse-generated-fechadas)
  (MAIN::aberta (x ?x) (y ?y) (valor ?v&:(> ?v 0)))
  =>
  (assert (MAIN::cell (x ?x) (y ?y) (v ?v) (viz-closed (create$)) (viz-safe (create$)) (viz-flags (create$))))
)

;;GERAR 
(defrule fill-vizs
  (declare (salience 1))
  (parse-generated-fechadas)
  (MAIN::fechada (x ?xh) (y ?yh))
  ?z <- (MAIN::cell (x ?x) (y ?y) 
          (viz-closed $?vl)
        )
  (test (METHODS::viz ?xh ?yh ?x ?y))
  (test (not (METHODS::has-cell-member ?xh ?yh $?vl )))
  =>
  (modify ?z (viz-closed $?vl ?xh ?yh))
)

;;PASSA FLUXO PARA MINE
(defrule pass
  (declare (salience 0))
  ?z <- (parse-generated-fechadas)
  =>
  (retract ?z)
  (assert (FLAG::go_to))
  (printout t "Acabou de gerar tudo!" crlf)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; MODD FLAG
;;TRIGGER PARA FASE DE FLAGGING
(defrule FLAG::setup
  (declare (auto-focus TRUE))
  ?z <- (FLAG::go_to)
  =>
  (retract ?z)
  (assert (FLAG::flag))
)

;; COLOCA FLAGS EVIDENTES
(defrule set-evident-flag
  (declare (salience 2))
  (FLAG::flag)
  (MAIN::fechada (x ?xf) (y ?yf))
  ?c <- (MAIN::cell (x ?xc) (y ?yc) (v ?vc)
          (viz-closed $?cclosed)
          (viz-flags $?cflags)
        )
  (test
    (and
      (METHODS::viz ?xf ?yf ?xc ?yc)
      (= (length$ $?cclosed) (* ?vc 2))
      (not (METHODS::has-cell-member ?xf ?yf $?cflags))
    )
  )
  (not (exists(MAIN::flag ?xf ?yf)))
  =>
  (assert (MAIN::nova-flag ?xf ?yf))
  (modify ?c (viz-flags $?cflags ?xf ?yf))
)

;; COLOCA FLAGS
(defrule set-flags
  (declare (salience 2))
  (FLAG::flag)
  (MAIN::nova-flag ?xf ?yf)
  ?c <- (MAIN::cell (x ?xc) (y ?yc) (v ?vc)
          (viz-closed $?cclosed)
          (viz-flags $?cflags)
        )
  (test
    (and
      (METHODS::viz ?xf ?yf ?xc ?yc)
      (not (METHODS::has-cell-member ?xf ?yf $?cflags))
    )
  )
  =>
  (modify ?c (viz-flags $?cflags ?xf ?yf))
)

;; CALCULATED FLAGS
(defrule set-calculated-flags
  (declare (salience 2))
  (FLAG::flag)
  (MAIN::fechada (x ?xf) (y ?yf))
  ?c <- (MAIN::cell (x ?xc) (y ?yc) (v ?vc)
          (viz-closed $?cclosed)
          (viz-flags $?cflags)
          (viz-safe $?csafe)
        )
  (test
    (and
      (METHODS::viz ?xf ?yf ?xc ?yc)
      (= (- (length$ $?cclosed) (length$ $?csafe) ) (* ?vc 2))
      (not(METHODS::has-cell-member ?xf ?yf $?csafe))
      (not(METHODS::has-cell-member ?xf ?yf $?cflags))
    )
  )
  =>
  (assert (MAIN::nova-flag ?xf ?yf))
  (modify ?c (viz-flags $?cflags ?xf ?yf))
)


;; COLOCA SAFES
(defrule set-safes
  (declare (salience 2))
  (FLAG::flag)
  (MAIN::fechada (x ?xf) (y ?yf))
  ?c <- (MAIN::cell (x ?xc) (y ?yc) (v ?vc)
          (viz-closed $?cclosed)
          (viz-flags $?cflags)
          (viz-safe $?csafe)
        )
  (test
    (and
      (= (length$ $?cflags) (* ?vc 2))
      (not (METHODS::has-cell-member ?xf ?yf $?csafe))
      (not (METHODS::has-cell-member ?xf ?yf $?cflags))
      (METHODS::viz ?xf ?yf ?xc ?yc)
    )
  )
  ?id <- (MAIN::lista-safes $?safes)
  =>
  (assert (MAIN::safe ?xf ?yf))
  (modify ?c (viz-safe $?csafe ?xf ?yf))
  (if (not (METHODS::has-cell-member ?xf ?yf $?safes))
    then
      (retract ?id)
      (assert (MAIN::lista-safes $?safes ?xf ?yf))
  )
)

;; COLOCA SAFE EM ADJANCENTES
(defrule set-side-safes
  (declare (salience 2))
  (FLAG::flag)
  (MAIN::safe ?xs ?ys)
  ?c <- (MAIN::cell (x ?xc) (y ?yc) (v ?vc)
          (viz-closed $?cclosed)
          (viz-safe $?csafe)
          (viz-flags $?cflags)
        )
  (test
    (and
      (METHODS::viz ?xs ?ys ?xc ?yc)
      (not (METHODS::has-cell-member ?xs ?ys $?csafe))
      (not (METHODS::has-cell-member ?xs ?ys $?cflags))
    )
  )
  =>
  (modify ?c (viz-safe $?csafe ?xs ?ys))
)

(defrule pass
  (declare (salience 1))
  (FLAG::flag)
  =>
  (assert (MINE::prepare-play))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;FINAL MESSAGE
(printout t "O FIM de mineX18.jess" crlf)